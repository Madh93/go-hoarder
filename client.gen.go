// Package hoarder provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package hoarder

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBookmarks request
	GetBookmarks(ctx context.Context, params *GetBookmarksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBookmarksWithBody request with any body
	PostBookmarksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBookmarks(ctx context.Context, body PostBookmarksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBookmarksBookmarkId request
	DeleteBookmarksBookmarkId(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBookmarksBookmarkId request
	GetBookmarksBookmarkId(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchBookmarksBookmarkIdWithBody request with any body
	PatchBookmarksBookmarkIdWithBody(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchBookmarksBookmarkId(ctx context.Context, bookmarkId BookmarkId, body PatchBookmarksBookmarkIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBookmarksBookmarkIdTagsWithBody request with any body
	DeleteBookmarksBookmarkIdTagsWithBody(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteBookmarksBookmarkIdTags(ctx context.Context, bookmarkId BookmarkId, body DeleteBookmarksBookmarkIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBookmarksBookmarkIdTagsWithBody request with any body
	PostBookmarksBookmarkIdTagsWithBody(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBookmarksBookmarkIdTags(ctx context.Context, bookmarkId BookmarkId, body PostBookmarksBookmarkIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchListListIdWithBody request with any body
	PatchListListIdWithBody(ctx context.Context, listId ListId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchListListId(ctx context.Context, listId ListId, body PatchListListIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLists request
	GetLists(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostListsWithBody request with any body
	PostListsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLists(ctx context.Context, body PostListsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteListsListId request
	DeleteListsListId(ctx context.Context, listId ListId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListsListId request
	GetListsListId(ctx context.Context, listId ListId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListsListIdBookmarks request
	GetListsListIdBookmarks(ctx context.Context, listId ListId, params *GetListsListIdBookmarksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteListsListIdBookmarksBookmarkId request
	DeleteListsListIdBookmarksBookmarkId(ctx context.Context, listId ListId, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutListsListIdBookmarksBookmarkId request
	PutListsListIdBookmarksBookmarkId(ctx context.Context, listId ListId, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTags request
	GetTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTagsTagId request
	DeleteTagsTagId(ctx context.Context, tagId TagId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagsTagId request
	GetTagsTagId(ctx context.Context, tagId TagId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchTagsTagIdWithBody request with any body
	PatchTagsTagIdWithBody(ctx context.Context, tagId TagId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchTagsTagId(ctx context.Context, tagId TagId, body PatchTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagsTagIdBookmarks request
	GetTagsTagIdBookmarks(ctx context.Context, tagId TagId, params *GetTagsTagIdBookmarksParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBookmarks(ctx context.Context, params *GetBookmarksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBookmarksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBookmarksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBookmarksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBookmarks(ctx context.Context, body PostBookmarksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBookmarksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBookmarksBookmarkId(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBookmarksBookmarkIdRequest(c.Server, bookmarkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBookmarksBookmarkId(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBookmarksBookmarkIdRequest(c.Server, bookmarkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchBookmarksBookmarkIdWithBody(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchBookmarksBookmarkIdRequestWithBody(c.Server, bookmarkId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchBookmarksBookmarkId(ctx context.Context, bookmarkId BookmarkId, body PatchBookmarksBookmarkIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchBookmarksBookmarkIdRequest(c.Server, bookmarkId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBookmarksBookmarkIdTagsWithBody(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBookmarksBookmarkIdTagsRequestWithBody(c.Server, bookmarkId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBookmarksBookmarkIdTags(ctx context.Context, bookmarkId BookmarkId, body DeleteBookmarksBookmarkIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBookmarksBookmarkIdTagsRequest(c.Server, bookmarkId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBookmarksBookmarkIdTagsWithBody(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBookmarksBookmarkIdTagsRequestWithBody(c.Server, bookmarkId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBookmarksBookmarkIdTags(ctx context.Context, bookmarkId BookmarkId, body PostBookmarksBookmarkIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBookmarksBookmarkIdTagsRequest(c.Server, bookmarkId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchListListIdWithBody(ctx context.Context, listId ListId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchListListIdRequestWithBody(c.Server, listId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchListListId(ctx context.Context, listId ListId, body PatchListListIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchListListIdRequest(c.Server, listId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLists(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostListsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostListsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLists(ctx context.Context, body PostListsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostListsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteListsListId(ctx context.Context, listId ListId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteListsListIdRequest(c.Server, listId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListsListId(ctx context.Context, listId ListId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListsListIdRequest(c.Server, listId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListsListIdBookmarks(ctx context.Context, listId ListId, params *GetListsListIdBookmarksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListsListIdBookmarksRequest(c.Server, listId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteListsListIdBookmarksBookmarkId(ctx context.Context, listId ListId, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteListsListIdBookmarksBookmarkIdRequest(c.Server, listId, bookmarkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutListsListIdBookmarksBookmarkId(ctx context.Context, listId ListId, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutListsListIdBookmarksBookmarkIdRequest(c.Server, listId, bookmarkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTagsTagId(ctx context.Context, tagId TagId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagsTagIdRequest(c.Server, tagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagsTagId(ctx context.Context, tagId TagId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsTagIdRequest(c.Server, tagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTagsTagIdWithBody(ctx context.Context, tagId TagId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTagsTagIdRequestWithBody(c.Server, tagId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTagsTagId(ctx context.Context, tagId TagId, body PatchTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTagsTagIdRequest(c.Server, tagId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagsTagIdBookmarks(ctx context.Context, tagId TagId, params *GetTagsTagIdBookmarksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsTagIdBookmarksRequest(c.Server, tagId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBookmarksRequest generates requests for GetBookmarks
func NewGetBookmarksRequest(server string, params *GetBookmarksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Favourited != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "favourited", runtime.ParamLocationQuery, *params.Favourited); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBookmarksRequest calls the generic PostBookmarks builder with application/json body
func NewPostBookmarksRequest(server string, body PostBookmarksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBookmarksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBookmarksRequestWithBody generates requests for PostBookmarks with any type of body
func NewPostBookmarksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBookmarksBookmarkIdRequest generates requests for DeleteBookmarksBookmarkId
func NewDeleteBookmarksBookmarkIdRequest(server string, bookmarkId BookmarkId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBookmarksBookmarkIdRequest generates requests for GetBookmarksBookmarkId
func NewGetBookmarksBookmarkIdRequest(server string, bookmarkId BookmarkId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchBookmarksBookmarkIdRequest calls the generic PatchBookmarksBookmarkId builder with application/json body
func NewPatchBookmarksBookmarkIdRequest(server string, bookmarkId BookmarkId, body PatchBookmarksBookmarkIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchBookmarksBookmarkIdRequestWithBody(server, bookmarkId, "application/json", bodyReader)
}

// NewPatchBookmarksBookmarkIdRequestWithBody generates requests for PatchBookmarksBookmarkId with any type of body
func NewPatchBookmarksBookmarkIdRequestWithBody(server string, bookmarkId BookmarkId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBookmarksBookmarkIdTagsRequest calls the generic DeleteBookmarksBookmarkIdTags builder with application/json body
func NewDeleteBookmarksBookmarkIdTagsRequest(server string, bookmarkId BookmarkId, body DeleteBookmarksBookmarkIdTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteBookmarksBookmarkIdTagsRequestWithBody(server, bookmarkId, "application/json", bodyReader)
}

// NewDeleteBookmarksBookmarkIdTagsRequestWithBody generates requests for DeleteBookmarksBookmarkIdTags with any type of body
func NewDeleteBookmarksBookmarkIdTagsRequestWithBody(server string, bookmarkId BookmarkId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostBookmarksBookmarkIdTagsRequest calls the generic PostBookmarksBookmarkIdTags builder with application/json body
func NewPostBookmarksBookmarkIdTagsRequest(server string, bookmarkId BookmarkId, body PostBookmarksBookmarkIdTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBookmarksBookmarkIdTagsRequestWithBody(server, bookmarkId, "application/json", bodyReader)
}

// NewPostBookmarksBookmarkIdTagsRequestWithBody generates requests for PostBookmarksBookmarkIdTags with any type of body
func NewPostBookmarksBookmarkIdTagsRequestWithBody(server string, bookmarkId BookmarkId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bookmarks/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchListListIdRequest calls the generic PatchListListId builder with application/json body
func NewPatchListListIdRequest(server string, listId ListId, body PatchListListIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchListListIdRequestWithBody(server, listId, "application/json", bodyReader)
}

// NewPatchListListIdRequestWithBody generates requests for PatchListListId with any type of body
func NewPatchListListIdRequestWithBody(server string, listId ListId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listId", runtime.ParamLocationPath, listId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/list/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetListsRequest generates requests for GetLists
func NewGetListsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostListsRequest calls the generic PostLists builder with application/json body
func NewPostListsRequest(server string, body PostListsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostListsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostListsRequestWithBody generates requests for PostLists with any type of body
func NewPostListsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteListsListIdRequest generates requests for DeleteListsListId
func NewDeleteListsListIdRequest(server string, listId ListId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listId", runtime.ParamLocationPath, listId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListsListIdRequest generates requests for GetListsListId
func NewGetListsListIdRequest(server string, listId ListId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listId", runtime.ParamLocationPath, listId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListsListIdBookmarksRequest generates requests for GetListsListIdBookmarks
func NewGetListsListIdBookmarksRequest(server string, listId ListId, params *GetListsListIdBookmarksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listId", runtime.ParamLocationPath, listId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s/bookmarks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteListsListIdBookmarksBookmarkIdRequest generates requests for DeleteListsListIdBookmarksBookmarkId
func NewDeleteListsListIdBookmarksBookmarkIdRequest(server string, listId ListId, bookmarkId BookmarkId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listId", runtime.ParamLocationPath, listId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s/bookmarks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutListsListIdBookmarksBookmarkIdRequest generates requests for PutListsListIdBookmarksBookmarkId
func NewPutListsListIdBookmarksBookmarkIdRequest(server string, listId ListId, bookmarkId BookmarkId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listId", runtime.ParamLocationPath, listId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bookmarkId", runtime.ParamLocationPath, bookmarkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s/bookmarks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagsRequest generates requests for GetTags
func NewGetTagsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTagsTagIdRequest generates requests for DeleteTagsTagId
func NewDeleteTagsTagIdRequest(server string, tagId TagId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagsTagIdRequest generates requests for GetTagsTagId
func NewGetTagsTagIdRequest(server string, tagId TagId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchTagsTagIdRequest calls the generic PatchTagsTagId builder with application/json body
func NewPatchTagsTagIdRequest(server string, tagId TagId, body PatchTagsTagIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchTagsTagIdRequestWithBody(server, tagId, "application/json", bodyReader)
}

// NewPatchTagsTagIdRequestWithBody generates requests for PatchTagsTagId with any type of body
func NewPatchTagsTagIdRequestWithBody(server string, tagId TagId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTagsTagIdBookmarksRequest generates requests for GetTagsTagIdBookmarks
func NewGetTagsTagIdBookmarksRequest(server string, tagId TagId, params *GetTagsTagIdBookmarksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s/bookmarks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBookmarksWithResponse request
	GetBookmarksWithResponse(ctx context.Context, params *GetBookmarksParams, reqEditors ...RequestEditorFn) (*GetBookmarksResponse, error)

	// PostBookmarksWithBodyWithResponse request with any body
	PostBookmarksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBookmarksResponse, error)

	PostBookmarksWithResponse(ctx context.Context, body PostBookmarksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBookmarksResponse, error)

	// DeleteBookmarksBookmarkIdWithResponse request
	DeleteBookmarksBookmarkIdWithResponse(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*DeleteBookmarksBookmarkIdResponse, error)

	// GetBookmarksBookmarkIdWithResponse request
	GetBookmarksBookmarkIdWithResponse(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*GetBookmarksBookmarkIdResponse, error)

	// PatchBookmarksBookmarkIdWithBodyWithResponse request with any body
	PatchBookmarksBookmarkIdWithBodyWithResponse(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchBookmarksBookmarkIdResponse, error)

	PatchBookmarksBookmarkIdWithResponse(ctx context.Context, bookmarkId BookmarkId, body PatchBookmarksBookmarkIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchBookmarksBookmarkIdResponse, error)

	// DeleteBookmarksBookmarkIdTagsWithBodyWithResponse request with any body
	DeleteBookmarksBookmarkIdTagsWithBodyWithResponse(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteBookmarksBookmarkIdTagsResponse, error)

	DeleteBookmarksBookmarkIdTagsWithResponse(ctx context.Context, bookmarkId BookmarkId, body DeleteBookmarksBookmarkIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteBookmarksBookmarkIdTagsResponse, error)

	// PostBookmarksBookmarkIdTagsWithBodyWithResponse request with any body
	PostBookmarksBookmarkIdTagsWithBodyWithResponse(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBookmarksBookmarkIdTagsResponse, error)

	PostBookmarksBookmarkIdTagsWithResponse(ctx context.Context, bookmarkId BookmarkId, body PostBookmarksBookmarkIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBookmarksBookmarkIdTagsResponse, error)

	// PatchListListIdWithBodyWithResponse request with any body
	PatchListListIdWithBodyWithResponse(ctx context.Context, listId ListId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchListListIdResponse, error)

	PatchListListIdWithResponse(ctx context.Context, listId ListId, body PatchListListIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchListListIdResponse, error)

	// GetListsWithResponse request
	GetListsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetListsResponse, error)

	// PostListsWithBodyWithResponse request with any body
	PostListsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostListsResponse, error)

	PostListsWithResponse(ctx context.Context, body PostListsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostListsResponse, error)

	// DeleteListsListIdWithResponse request
	DeleteListsListIdWithResponse(ctx context.Context, listId ListId, reqEditors ...RequestEditorFn) (*DeleteListsListIdResponse, error)

	// GetListsListIdWithResponse request
	GetListsListIdWithResponse(ctx context.Context, listId ListId, reqEditors ...RequestEditorFn) (*GetListsListIdResponse, error)

	// GetListsListIdBookmarksWithResponse request
	GetListsListIdBookmarksWithResponse(ctx context.Context, listId ListId, params *GetListsListIdBookmarksParams, reqEditors ...RequestEditorFn) (*GetListsListIdBookmarksResponse, error)

	// DeleteListsListIdBookmarksBookmarkIdWithResponse request
	DeleteListsListIdBookmarksBookmarkIdWithResponse(ctx context.Context, listId ListId, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*DeleteListsListIdBookmarksBookmarkIdResponse, error)

	// PutListsListIdBookmarksBookmarkIdWithResponse request
	PutListsListIdBookmarksBookmarkIdWithResponse(ctx context.Context, listId ListId, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*PutListsListIdBookmarksBookmarkIdResponse, error)

	// GetTagsWithResponse request
	GetTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTagsResponse, error)

	// DeleteTagsTagIdWithResponse request
	DeleteTagsTagIdWithResponse(ctx context.Context, tagId TagId, reqEditors ...RequestEditorFn) (*DeleteTagsTagIdResponse, error)

	// GetTagsTagIdWithResponse request
	GetTagsTagIdWithResponse(ctx context.Context, tagId TagId, reqEditors ...RequestEditorFn) (*GetTagsTagIdResponse, error)

	// PatchTagsTagIdWithBodyWithResponse request with any body
	PatchTagsTagIdWithBodyWithResponse(ctx context.Context, tagId TagId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTagsTagIdResponse, error)

	PatchTagsTagIdWithResponse(ctx context.Context, tagId TagId, body PatchTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTagsTagIdResponse, error)

	// GetTagsTagIdBookmarksWithResponse request
	GetTagsTagIdBookmarksWithResponse(ctx context.Context, tagId TagId, params *GetTagsTagIdBookmarksParams, reqEditors ...RequestEditorFn) (*GetTagsTagIdBookmarksResponse, error)
}

type GetBookmarksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBookmarks
}

// Status returns HTTPResponse.Status
func (r GetBookmarksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBookmarksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBookmarksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Bookmark
}

// Status returns HTTPResponse.Status
func (r PostBookmarksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBookmarksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBookmarksBookmarkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBookmarksBookmarkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBookmarksBookmarkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBookmarksBookmarkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Bookmark
}

// Status returns HTTPResponse.Status
func (r GetBookmarksBookmarkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBookmarksBookmarkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchBookmarksBookmarkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Archived      bool                                      `json:"archived"`
		CreatedAt     string                                    `json:"createdAt"`
		Favourited    bool                                      `json:"favourited"`
		Id            string                                    `json:"id"`
		Note          *string                                   `json:"note"`
		Summary       *string                                   `json:"summary"`
		TaggingStatus *PatchBookmarksBookmarkId200TaggingStatus `json:"taggingStatus"`
		Title         *string                                   `json:"title"`
	}
}
type PatchBookmarksBookmarkId200TaggingStatus string

// Status returns HTTPResponse.Status
func (r PatchBookmarksBookmarkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchBookmarksBookmarkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBookmarksBookmarkIdTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Detached []TagId `json:"detached"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteBookmarksBookmarkIdTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBookmarksBookmarkIdTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBookmarksBookmarkIdTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Attached []TagId `json:"attached"`
	}
}

// Status returns HTTPResponse.Status
func (r PostBookmarksBookmarkIdTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBookmarksBookmarkIdTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchListListIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *List
}

// Status returns HTTPResponse.Status
func (r PatchListListIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchListListIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Lists []List `json:"lists"`
	}
}

// Status returns HTTPResponse.Status
func (r GetListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *List
}

// Status returns HTTPResponse.Status
func (r PostListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteListsListIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteListsListIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteListsListIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListsListIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *List
}

// Status returns HTTPResponse.Status
func (r GetListsListIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListsListIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListsListIdBookmarksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBookmarks
}

// Status returns HTTPResponse.Status
func (r GetListsListIdBookmarksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListsListIdBookmarksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteListsListIdBookmarksBookmarkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteListsListIdBookmarksBookmarkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteListsListIdBookmarksBookmarkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutListsListIdBookmarksBookmarkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutListsListIdBookmarksBookmarkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutListsListIdBookmarksBookmarkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Tags []Tag `json:"tags"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagsTagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTagsTagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagsTagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsTagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r GetTagsTagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsTagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchTagsTagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r PatchTagsTagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchTagsTagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsTagIdBookmarksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBookmarks
}

// Status returns HTTPResponse.Status
func (r GetTagsTagIdBookmarksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsTagIdBookmarksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBookmarksWithResponse request returning *GetBookmarksResponse
func (c *ClientWithResponses) GetBookmarksWithResponse(ctx context.Context, params *GetBookmarksParams, reqEditors ...RequestEditorFn) (*GetBookmarksResponse, error) {
	rsp, err := c.GetBookmarks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBookmarksResponse(rsp)
}

// PostBookmarksWithBodyWithResponse request with arbitrary body returning *PostBookmarksResponse
func (c *ClientWithResponses) PostBookmarksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBookmarksResponse, error) {
	rsp, err := c.PostBookmarksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBookmarksResponse(rsp)
}

func (c *ClientWithResponses) PostBookmarksWithResponse(ctx context.Context, body PostBookmarksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBookmarksResponse, error) {
	rsp, err := c.PostBookmarks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBookmarksResponse(rsp)
}

// DeleteBookmarksBookmarkIdWithResponse request returning *DeleteBookmarksBookmarkIdResponse
func (c *ClientWithResponses) DeleteBookmarksBookmarkIdWithResponse(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*DeleteBookmarksBookmarkIdResponse, error) {
	rsp, err := c.DeleteBookmarksBookmarkId(ctx, bookmarkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBookmarksBookmarkIdResponse(rsp)
}

// GetBookmarksBookmarkIdWithResponse request returning *GetBookmarksBookmarkIdResponse
func (c *ClientWithResponses) GetBookmarksBookmarkIdWithResponse(ctx context.Context, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*GetBookmarksBookmarkIdResponse, error) {
	rsp, err := c.GetBookmarksBookmarkId(ctx, bookmarkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBookmarksBookmarkIdResponse(rsp)
}

// PatchBookmarksBookmarkIdWithBodyWithResponse request with arbitrary body returning *PatchBookmarksBookmarkIdResponse
func (c *ClientWithResponses) PatchBookmarksBookmarkIdWithBodyWithResponse(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchBookmarksBookmarkIdResponse, error) {
	rsp, err := c.PatchBookmarksBookmarkIdWithBody(ctx, bookmarkId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchBookmarksBookmarkIdResponse(rsp)
}

func (c *ClientWithResponses) PatchBookmarksBookmarkIdWithResponse(ctx context.Context, bookmarkId BookmarkId, body PatchBookmarksBookmarkIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchBookmarksBookmarkIdResponse, error) {
	rsp, err := c.PatchBookmarksBookmarkId(ctx, bookmarkId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchBookmarksBookmarkIdResponse(rsp)
}

// DeleteBookmarksBookmarkIdTagsWithBodyWithResponse request with arbitrary body returning *DeleteBookmarksBookmarkIdTagsResponse
func (c *ClientWithResponses) DeleteBookmarksBookmarkIdTagsWithBodyWithResponse(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteBookmarksBookmarkIdTagsResponse, error) {
	rsp, err := c.DeleteBookmarksBookmarkIdTagsWithBody(ctx, bookmarkId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBookmarksBookmarkIdTagsResponse(rsp)
}

func (c *ClientWithResponses) DeleteBookmarksBookmarkIdTagsWithResponse(ctx context.Context, bookmarkId BookmarkId, body DeleteBookmarksBookmarkIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteBookmarksBookmarkIdTagsResponse, error) {
	rsp, err := c.DeleteBookmarksBookmarkIdTags(ctx, bookmarkId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBookmarksBookmarkIdTagsResponse(rsp)
}

// PostBookmarksBookmarkIdTagsWithBodyWithResponse request with arbitrary body returning *PostBookmarksBookmarkIdTagsResponse
func (c *ClientWithResponses) PostBookmarksBookmarkIdTagsWithBodyWithResponse(ctx context.Context, bookmarkId BookmarkId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBookmarksBookmarkIdTagsResponse, error) {
	rsp, err := c.PostBookmarksBookmarkIdTagsWithBody(ctx, bookmarkId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBookmarksBookmarkIdTagsResponse(rsp)
}

func (c *ClientWithResponses) PostBookmarksBookmarkIdTagsWithResponse(ctx context.Context, bookmarkId BookmarkId, body PostBookmarksBookmarkIdTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBookmarksBookmarkIdTagsResponse, error) {
	rsp, err := c.PostBookmarksBookmarkIdTags(ctx, bookmarkId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBookmarksBookmarkIdTagsResponse(rsp)
}

// PatchListListIdWithBodyWithResponse request with arbitrary body returning *PatchListListIdResponse
func (c *ClientWithResponses) PatchListListIdWithBodyWithResponse(ctx context.Context, listId ListId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchListListIdResponse, error) {
	rsp, err := c.PatchListListIdWithBody(ctx, listId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchListListIdResponse(rsp)
}

func (c *ClientWithResponses) PatchListListIdWithResponse(ctx context.Context, listId ListId, body PatchListListIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchListListIdResponse, error) {
	rsp, err := c.PatchListListId(ctx, listId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchListListIdResponse(rsp)
}

// GetListsWithResponse request returning *GetListsResponse
func (c *ClientWithResponses) GetListsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetListsResponse, error) {
	rsp, err := c.GetLists(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListsResponse(rsp)
}

// PostListsWithBodyWithResponse request with arbitrary body returning *PostListsResponse
func (c *ClientWithResponses) PostListsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostListsResponse, error) {
	rsp, err := c.PostListsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostListsResponse(rsp)
}

func (c *ClientWithResponses) PostListsWithResponse(ctx context.Context, body PostListsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostListsResponse, error) {
	rsp, err := c.PostLists(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostListsResponse(rsp)
}

// DeleteListsListIdWithResponse request returning *DeleteListsListIdResponse
func (c *ClientWithResponses) DeleteListsListIdWithResponse(ctx context.Context, listId ListId, reqEditors ...RequestEditorFn) (*DeleteListsListIdResponse, error) {
	rsp, err := c.DeleteListsListId(ctx, listId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteListsListIdResponse(rsp)
}

// GetListsListIdWithResponse request returning *GetListsListIdResponse
func (c *ClientWithResponses) GetListsListIdWithResponse(ctx context.Context, listId ListId, reqEditors ...RequestEditorFn) (*GetListsListIdResponse, error) {
	rsp, err := c.GetListsListId(ctx, listId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListsListIdResponse(rsp)
}

// GetListsListIdBookmarksWithResponse request returning *GetListsListIdBookmarksResponse
func (c *ClientWithResponses) GetListsListIdBookmarksWithResponse(ctx context.Context, listId ListId, params *GetListsListIdBookmarksParams, reqEditors ...RequestEditorFn) (*GetListsListIdBookmarksResponse, error) {
	rsp, err := c.GetListsListIdBookmarks(ctx, listId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListsListIdBookmarksResponse(rsp)
}

// DeleteListsListIdBookmarksBookmarkIdWithResponse request returning *DeleteListsListIdBookmarksBookmarkIdResponse
func (c *ClientWithResponses) DeleteListsListIdBookmarksBookmarkIdWithResponse(ctx context.Context, listId ListId, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*DeleteListsListIdBookmarksBookmarkIdResponse, error) {
	rsp, err := c.DeleteListsListIdBookmarksBookmarkId(ctx, listId, bookmarkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteListsListIdBookmarksBookmarkIdResponse(rsp)
}

// PutListsListIdBookmarksBookmarkIdWithResponse request returning *PutListsListIdBookmarksBookmarkIdResponse
func (c *ClientWithResponses) PutListsListIdBookmarksBookmarkIdWithResponse(ctx context.Context, listId ListId, bookmarkId BookmarkId, reqEditors ...RequestEditorFn) (*PutListsListIdBookmarksBookmarkIdResponse, error) {
	rsp, err := c.PutListsListIdBookmarksBookmarkId(ctx, listId, bookmarkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutListsListIdBookmarksBookmarkIdResponse(rsp)
}

// GetTagsWithResponse request returning *GetTagsResponse
func (c *ClientWithResponses) GetTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTagsResponse, error) {
	rsp, err := c.GetTags(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsResponse(rsp)
}

// DeleteTagsTagIdWithResponse request returning *DeleteTagsTagIdResponse
func (c *ClientWithResponses) DeleteTagsTagIdWithResponse(ctx context.Context, tagId TagId, reqEditors ...RequestEditorFn) (*DeleteTagsTagIdResponse, error) {
	rsp, err := c.DeleteTagsTagId(ctx, tagId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagsTagIdResponse(rsp)
}

// GetTagsTagIdWithResponse request returning *GetTagsTagIdResponse
func (c *ClientWithResponses) GetTagsTagIdWithResponse(ctx context.Context, tagId TagId, reqEditors ...RequestEditorFn) (*GetTagsTagIdResponse, error) {
	rsp, err := c.GetTagsTagId(ctx, tagId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsTagIdResponse(rsp)
}

// PatchTagsTagIdWithBodyWithResponse request with arbitrary body returning *PatchTagsTagIdResponse
func (c *ClientWithResponses) PatchTagsTagIdWithBodyWithResponse(ctx context.Context, tagId TagId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTagsTagIdResponse, error) {
	rsp, err := c.PatchTagsTagIdWithBody(ctx, tagId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTagsTagIdResponse(rsp)
}

func (c *ClientWithResponses) PatchTagsTagIdWithResponse(ctx context.Context, tagId TagId, body PatchTagsTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTagsTagIdResponse, error) {
	rsp, err := c.PatchTagsTagId(ctx, tagId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTagsTagIdResponse(rsp)
}

// GetTagsTagIdBookmarksWithResponse request returning *GetTagsTagIdBookmarksResponse
func (c *ClientWithResponses) GetTagsTagIdBookmarksWithResponse(ctx context.Context, tagId TagId, params *GetTagsTagIdBookmarksParams, reqEditors ...RequestEditorFn) (*GetTagsTagIdBookmarksResponse, error) {
	rsp, err := c.GetTagsTagIdBookmarks(ctx, tagId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsTagIdBookmarksResponse(rsp)
}

// ParseGetBookmarksResponse parses an HTTP response from a GetBookmarksWithResponse call
func ParseGetBookmarksResponse(rsp *http.Response) (*GetBookmarksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBookmarksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBookmarks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostBookmarksResponse parses an HTTP response from a PostBookmarksWithResponse call
func ParsePostBookmarksResponse(rsp *http.Response) (*PostBookmarksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBookmarksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Bookmark
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteBookmarksBookmarkIdResponse parses an HTTP response from a DeleteBookmarksBookmarkIdWithResponse call
func ParseDeleteBookmarksBookmarkIdResponse(rsp *http.Response) (*DeleteBookmarksBookmarkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBookmarksBookmarkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBookmarksBookmarkIdResponse parses an HTTP response from a GetBookmarksBookmarkIdWithResponse call
func ParseGetBookmarksBookmarkIdResponse(rsp *http.Response) (*GetBookmarksBookmarkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBookmarksBookmarkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Bookmark
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchBookmarksBookmarkIdResponse parses an HTTP response from a PatchBookmarksBookmarkIdWithResponse call
func ParsePatchBookmarksBookmarkIdResponse(rsp *http.Response) (*PatchBookmarksBookmarkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchBookmarksBookmarkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Archived      bool                                      `json:"archived"`
			CreatedAt     string                                    `json:"createdAt"`
			Favourited    bool                                      `json:"favourited"`
			Id            string                                    `json:"id"`
			Note          *string                                   `json:"note"`
			Summary       *string                                   `json:"summary"`
			TaggingStatus *PatchBookmarksBookmarkId200TaggingStatus `json:"taggingStatus"`
			Title         *string                                   `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteBookmarksBookmarkIdTagsResponse parses an HTTP response from a DeleteBookmarksBookmarkIdTagsWithResponse call
func ParseDeleteBookmarksBookmarkIdTagsResponse(rsp *http.Response) (*DeleteBookmarksBookmarkIdTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBookmarksBookmarkIdTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Detached []TagId `json:"detached"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostBookmarksBookmarkIdTagsResponse parses an HTTP response from a PostBookmarksBookmarkIdTagsWithResponse call
func ParsePostBookmarksBookmarkIdTagsResponse(rsp *http.Response) (*PostBookmarksBookmarkIdTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBookmarksBookmarkIdTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Attached []TagId `json:"attached"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchListListIdResponse parses an HTTP response from a PatchListListIdWithResponse call
func ParsePatchListListIdResponse(rsp *http.Response) (*PatchListListIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchListListIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest List
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetListsResponse parses an HTTP response from a GetListsWithResponse call
func ParseGetListsResponse(rsp *http.Response) (*GetListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Lists []List `json:"lists"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostListsResponse parses an HTTP response from a PostListsWithResponse call
func ParsePostListsResponse(rsp *http.Response) (*PostListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest List
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteListsListIdResponse parses an HTTP response from a DeleteListsListIdWithResponse call
func ParseDeleteListsListIdResponse(rsp *http.Response) (*DeleteListsListIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteListsListIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetListsListIdResponse parses an HTTP response from a GetListsListIdWithResponse call
func ParseGetListsListIdResponse(rsp *http.Response) (*GetListsListIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListsListIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest List
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetListsListIdBookmarksResponse parses an HTTP response from a GetListsListIdBookmarksWithResponse call
func ParseGetListsListIdBookmarksResponse(rsp *http.Response) (*GetListsListIdBookmarksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListsListIdBookmarksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBookmarks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteListsListIdBookmarksBookmarkIdResponse parses an HTTP response from a DeleteListsListIdBookmarksBookmarkIdWithResponse call
func ParseDeleteListsListIdBookmarksBookmarkIdResponse(rsp *http.Response) (*DeleteListsListIdBookmarksBookmarkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteListsListIdBookmarksBookmarkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutListsListIdBookmarksBookmarkIdResponse parses an HTTP response from a PutListsListIdBookmarksBookmarkIdWithResponse call
func ParsePutListsListIdBookmarksBookmarkIdResponse(rsp *http.Response) (*PutListsListIdBookmarksBookmarkIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutListsListIdBookmarksBookmarkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTagsResponse parses an HTTP response from a GetTagsWithResponse call
func ParseGetTagsResponse(rsp *http.Response) (*GetTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Tags []Tag `json:"tags"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTagsTagIdResponse parses an HTTP response from a DeleteTagsTagIdWithResponse call
func ParseDeleteTagsTagIdResponse(rsp *http.Response) (*DeleteTagsTagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagsTagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTagsTagIdResponse parses an HTTP response from a GetTagsTagIdWithResponse call
func ParseGetTagsTagIdResponse(rsp *http.Response) (*GetTagsTagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsTagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchTagsTagIdResponse parses an HTTP response from a PatchTagsTagIdWithResponse call
func ParsePatchTagsTagIdResponse(rsp *http.Response) (*PatchTagsTagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchTagsTagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTagsTagIdBookmarksResponse parses an HTTP response from a GetTagsTagIdBookmarksWithResponse call
func ParseGetTagsTagIdBookmarksResponse(rsp *http.Response) (*GetTagsTagIdBookmarksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsTagIdBookmarksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBookmarks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
